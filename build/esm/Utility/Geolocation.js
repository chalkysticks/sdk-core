import * as Event from '../Event';
import * as Exception from '../Exception';
import { Cache } from './Cache';
import { toRadians, toDegrees, EARTH_RADIUS } from './Math';
export const config = {
    IP_LOCATION_API: 'https://ipapi.co/json/',
};
export const CACHE_EXPIRATION = 1000 * 6 * 2;
export const cache = new Cache(CACHE_EXPIRATION);
export async function getLocation() {
    const cacheKey = 'geolocation';
    const cachedLocation = cache.get(cacheKey);
    if (cachedLocation) {
        return cachedLocation;
    }
    try {
        if (navigator?.geolocation) {
            return await getBrowserLocation(cacheKey);
        }
        else if (await isCapacitorGeolocationAvailable()) {
            return await getCapacitorLocation(cacheKey);
        }
        else {
            return await getIPLocationFallback(cacheKey);
        }
    }
    catch (error) {
        throw error instanceof Error ? error : new Exception.Geolocation('Unknown error occurred');
    }
}
async function getBrowserLocation(cacheKey) {
    return new Promise((resolve, reject) => {
        navigator.geolocation.getCurrentPosition((position) => {
            cache.set(cacheKey, position, CACHE_EXPIRATION);
            console.info('ðŸ”¸ Location', position);
            Event.Bus.dispatch('location:change', position);
            resolve(position);
        }, async (error) => {
            console.warn('Browser geolocation error:', error);
            if (error.code === error.PERMISSION_DENIED) {
                reject(new Exception.Geolocation('Permission denied for geolocation.'));
            }
            else if (error.code === error.POSITION_UNAVAILABLE) {
                reject(new Exception.Geolocation('Geolocation position unavailable.'));
            }
            else if (error.code === error.TIMEOUT) {
                reject(new Exception.Geolocation('Geolocation request timed out.'));
            }
            else {
                try {
                    const position = await getIPLocation();
                    cache.set(cacheKey, position, CACHE_EXPIRATION);
                    console.info('ðŸ”º Location', position);
                    Event.Bus.dispatch('location:change', position);
                    resolve(position);
                }
                catch (ipError) {
                    reject(new Exception.Geolocation('Fallback IP location failed.'));
                }
            }
        });
    });
}
async function getCapacitorLocation(cacheKey) {
    try {
        const { Geolocation } = await import('@capacitor/geolocation');
        const position = await Geolocation.getCurrentPosition();
        cache.set(cacheKey, position, CACHE_EXPIRATION);
        console.info('ðŸ”¹ Location', position);
        Event.Bus.dispatch('location:change', position);
        return position;
    }
    catch (error) {
        try {
            const position = await getIPLocation();
            cache.set(cacheKey, position, CACHE_EXPIRATION);
            console.info('ðŸ”º Location', position);
            Event.Bus.dispatch('location:change', position);
            return position;
        }
        catch (ipError) {
            Event.Bus.dispatch('location:error', error);
            throw error;
        }
    }
}
async function getIPLocationFallback(cacheKey) {
    try {
        const position = await getIPLocation();
        cache.set(cacheKey, position, CACHE_EXPIRATION);
        console.info('ðŸ”º Location', position);
        Event.Bus.dispatch('location:change', position);
        return position;
    }
    catch (error) {
        Event.Bus.dispatch('location:error', error);
        throw new Exception.Geolocation('Failed to get IP location');
    }
}
async function getIPLocation() {
    const response = await fetch(config.IP_LOCATION_API);
    const data = await response.json();
    return {
        coords: {
            accuracy: 5000,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            latitude: data.latitude,
            longitude: data.longitude,
            speed: null,
        },
        timestamp: Date.now(),
    };
}
export function watchLocation(callback, errorCallback, options = { enableHighAccuracy: true }) {
    const cacheKey = 'geolocation';
    if (navigator?.geolocation) {
        return navigator.geolocation.watchPosition((position) => {
            cache.set(cacheKey, position, CACHE_EXPIRATION);
            Event.Bus.dispatch('location:change', position);
            callback?.(position);
        }, async (error) => {
            try {
                const ipPosition = await getIPLocation();
                cache.set(cacheKey, ipPosition, CACHE_EXPIRATION);
                Event.Bus.dispatch('location:change', ipPosition);
                callback?.(ipPosition);
            }
            catch (ipError) {
                Event.Bus.dispatch('location:error', error);
                errorCallback?.(error);
            }
        }, options);
    }
    return 0;
}
export function clearWatch(watchId) {
    try {
        if (!navigator?.geolocation) {
            throw new Exception.Geolocation('Geolocation is not supported by this browser.');
        }
        navigator.geolocation.clearWatch(watchId);
    }
    catch (error) {
        console.error('Error clearing geolocation watch:', error);
    }
}
export function distanceBetween(latitude1, longitude1, latitude2, longitude2) {
    const R = EARTH_RADIUS;
    const dLatitude = toRadians(latitude2 - latitude1);
    const dLongitude = toRadians(longitude2 - longitude1);
    const a = Math.sin(dLatitude / 2) * Math.sin(dLatitude / 2) +
        Math.cos(toRadians(latitude1)) * Math.cos(toRadians(latitude2)) * Math.sin(dLongitude / 2) * Math.sin(dLongitude / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const d = R * c;
    return d;
}
export function getBearing(latitude1, longitude1, latitude2, longitude2) {
    const dLongitude = toRadians(longitude2 - longitude1);
    const y = Math.sin(dLongitude) * Math.cos(toRadians(latitude2));
    const x = Math.cos(toRadians(latitude1)) * Math.sin(toRadians(latitude2)) -
        Math.sin(toRadians(latitude1)) * Math.cos(toRadians(latitude2)) * Math.cos(dLongitude);
    const brng = toDegrees(Math.atan2(y, x));
    return (brng + 360) % 360;
}
export function getBounds(latitude, longitude, radius) {
    const R = EARTH_RADIUS;
    const latitude1 = toRadians(latitude);
    const longitude1 = toRadians(longitude);
    const d = radius / R;
    const bounds = {
        latitudeMin: toDegrees(latitude1 - d),
        latitudeMax: toDegrees(latitude1 + d),
        longitudeMin: toDegrees(longitude1 - d / Math.cos(latitude1)),
        longitudeMax: toDegrees(longitude1 + d / Math.cos(latitude1)),
    };
    return bounds;
}
export function isPointInBounds(latitude, longitude, bounds) {
    return latitude >= bounds.latitudeMin && latitude <= bounds.latitudeMax && longitude >= bounds.longitudeMin && longitude <= bounds.longitudeMax;
}
async function isCapacitorGeolocationAvailable() {
    try {
        const { Geolocation } = await import('@capacitor/geolocation');
        return !!Geolocation;
    }
    catch {
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,
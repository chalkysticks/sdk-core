import { getEasingMethod } from './Easing';
export const FOOT_METER_RATIO = 3.28084;
export const MPH_METER_RATIO = 0.44704;
export function angle(x1, y1, x2, y2) {
    return Math.atan2(y2 - y1, x2 - x1);
}
export function angleAsDegrees(x1, y1, x2, y2) {
    return (angle(x1, y1, x2, y2) * 180) / Math.PI;
}
export function angleDifference(a, b) {
    return Math.atan2(Math.sin(b - a), Math.cos(b - a));
}
export function angleDifferenceAsDegrees(a, b) {
    return (angleDifference(a, b) * 180) / Math.PI;
}
export function angleFromVector(vector) {
    return Math.atan2(vector.y, vector.x);
}
export function clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
}
export function clampUnsigned(value, min, max) {
    [min, max] = [Math.min(min, max), Math.max(min, max)];
    return Math.sign(value) * Math.min(Math.abs(value), Math.abs(value) > min ? max : min);
}
export function denormalize(value, min, max, useClamp = false) {
    let output = value * (max - min) + min;
    if (useClamp) {
        output = clamp(output, min, max);
    }
    return output;
}
export function distance(x1, y1, x2, y2) {
    return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
}
export function dot(x1, y1, x2, y2) {
    return x1 * x2 + y1 * y2;
}
export function feetToMeters(feet) {
    return feet / FOOT_METER_RATIO;
}
export function inverseLerp(a, b, value) {
    return (value - a) / (b - a);
}
export function lerp(a, b, t) {
    return a + (b - a) * t;
}
export function logarithmicZoom(startValue, delta, increment = 0.025) {
    const currentZoomLog = Math.log(startValue);
    const amountLog = Math.log(delta + 1) || 0;
    let newZoom = Math.exp(currentZoomLog + amountLog * increment);
    return newZoom;
}
export function metersToFeet(meters) {
    return meters * FOOT_METER_RATIO;
}
export function minMax(value, min, max) {
    return clamp(value, min, max);
}
export function minMaxUnsigned(value, min, max) {
    return clampUnsigned(value, min, max);
}
export function mphToMs(mph) {
    return mph * MPH_METER_RATIO;
}
export function msToMph(ms) {
    return ms / MPH_METER_RATIO;
}
export function normalize(value, min, max, useClamp = false) {
    let output = (value - min) / (max - min);
    if (useClamp) {
        output = clamp(output, min, max);
    }
    return output;
}
export function remap(value, a, b, c, d) {
    return c + (d - c) * inverseLerp(a, b, value);
}
export function randomRange(min, max) {
    return lerp(min, max, Math.random());
}
export function randomInt(min, max) {
    return Math.floor(randomRange(min, max + 1));
}
export function randomSign() {
    return Math.random() < 0.5 ? -1 : 1;
}
export function rotate(x, y, angle) {
    const s = Math.sin(angle);
    const c = Math.cos(angle);
    return [x * c - y * s, x * s + y * c];
}
export function rotateDeg(x, y, angle) {
    return rotate(x, y, (angle * Math.PI) / 180);
}
export function round(value, decimals = 2) {
    return Number(value.toFixed(decimals));
}
export function roundToNearest(value, nearest) {
    return Math.round(value / nearest) * nearest;
}
export function roundToNearestFraction(value, fraction) {
    return Math.round(value * fraction) / fraction;
}
export function roundToDecimal(value, decimals) {
    return Math.round(value * 10 ** decimals) / 10 ** decimals;
}
export function smoothstep(min, max, value) {
    const x = clamp((value - min) / (max - min), 0, 1);
    return x * x * (3 - 2 * x);
}
export function smootherstep(min, max, value) {
    const x = clamp((value - min) / (max - min), 0, 1);
    return x * x * x * (x * (x * 6 - 15) + 10);
}
export function toRadians(degrees) {
    return (degrees * Math.PI) / 180;
}
export function toDegrees(radians) {
    return (radians * 180) / Math.PI;
}
export function transformRatio(ratio, by = 4, easeInFunction = 'linear', easeOutFunction = '') {
    if (!easeOutFunction) {
        easeOutFunction = easeInFunction;
    }
    const easeInMethod = getEasingMethod(easeInFunction);
    const easeOutMethod = getEasingMethod(easeOutFunction);
    if (ratio <= 1 / by) {
        return easeInMethod(ratio / (1 / by));
    }
    else if (ratio <= 1 - 1 / by) {
        return 1;
    }
    else {
        return easeOutMethod((1 - ratio) / (1 / by));
    }
}
//# sourceMappingURL=data:application/json;base64,
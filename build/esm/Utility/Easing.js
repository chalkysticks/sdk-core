export class EasingFunction {
    static linear(t) {
        return t;
    }
    static easeInQuad(t) {
        return t * t;
    }
    static easeOutQuad(t) {
        return t * (2 - t);
    }
    static easeInOutQuad(t) {
        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
    }
    static easeInCubic(t) {
        return t * t * t;
    }
    static easeOutCubic(t) {
        return --t * t * t + 1;
    }
    static easeInOutCubic(t) {
        return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    }
    static easeInQuart(t) {
        return t * t * t * t;
    }
    static easeOutQuart(t) {
        return 1 - --t * t * t * t;
    }
    static easeInOutQuart(t) {
        return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
    }
    static easeInQuint(t) {
        return t * t * t * t * t;
    }
    static easeOutQuint(t) {
        return 1 + --t * t * t * t * t;
    }
    static easeInOutQuint(t) {
        return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
    }
    static easeInSine(t) {
        return 1 - Math.cos((t * Math.PI) / 2);
    }
    static easeOutSine(t) {
        return Math.sin((t * Math.PI) / 2);
    }
    static easeInOutSine(t) {
        return -(Math.cos(Math.PI * t) - 1) / 2;
    }
    static easeInExpo(t) {
        return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));
    }
    static easeOutExpo(t) {
        return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;
    }
    static easeInOutExpo(t) {
        if (t === 0)
            return 0;
        if (t === 1)
            return 1;
        if ((t *= 2) < 1)
            return 0.5 * Math.pow(2, 10 * (t - 1));
        return 0.5 * (-Math.pow(2, -10 * --t) + 2);
    }
    static easeInCirc(t) {
        return -(Math.sqrt(1 - t * t) - 1);
    }
    static easeOutCirc(t) {
        return Math.sqrt(1 - --t * t);
    }
    static easeInOutCirc(t) {
        if ((t /= 0.5) < 1)
            return -0.5 * (Math.sqrt(1 - t * t) - 1);
        return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
    }
    static easeInBack(t, s = 1.70158) {
        return t * t * ((s + 1) * t - s);
    }
    static easeOutBack(t, s = 1.70158) {
        return --t * t * ((s + 1) * t + s) + 1;
    }
    static easeInOutBack(t, s = 1.70158) {
        if ((t /= 0.5) < 1)
            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
    }
}
export default class Easing {
    static linear(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.linear, clamp);
    }
    static easeInQuad(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInQuad, clamp);
    }
    static easeOutQuad(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeOutQuad, clamp);
    }
    static easeInOutQuad(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInOutQuad, clamp);
    }
    static easeInQuart(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInQuart, clamp);
    }
    static easeOutQuart(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeOutQuart, clamp);
    }
    static easeInOutQuart(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInOutQuart, clamp);
    }
    static easeInQuint(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInQuint, clamp);
    }
    static easeOutQuint(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeOutQuint, clamp);
    }
    static easeInOutQuint(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInOutQuint, clamp);
    }
    static easeInCubic(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInCubic, clamp);
    }
    static easeOutCubic(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeOutCubic, clamp);
    }
    static easeInOutCubic(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInOutCubic, clamp);
    }
    static easeInSine(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInSine, clamp);
    }
    static easeOutSine(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeOutSine, clamp);
    }
    static easeInOutSine(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInOutSine, clamp);
    }
    static easeInExpo(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInExpo, clamp);
    }
    static easeOutExpo(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeOutExpo, clamp);
    }
    static easeInOutExpo(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInOutExpo, clamp);
    }
    static easeInCirc(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInCirc, clamp);
    }
    static easeOutCirc(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeOutCirc, clamp);
    }
    static easeInOutCirc(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInOutCirc, clamp);
    }
    static easeInBack(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInBack, clamp);
    }
    static easeOutBack(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeOutBack, clamp);
    }
    static easeInOutBack(value, min = 0, max = 1, clamp = true) {
        return Easing.normalize(value, min, max, EasingFunction.easeInOutBack, clamp);
    }
    static normalize(value, min = 0, max = 1, easingFn, clamp = true) {
        let t = Easing.clamp((value - min) / (max - min), 0, 1);
        let output = clamp ? easingFn(t) : min + (max - min) * easingFn(t);
        return output;
    }
    static clamp(value, min = 0, max = 1) {
        return Math.min(Math.max(value, min), max);
    }
}
export function getEasingMethod(type) {
    if (Easing.hasOwnProperty(type)) {
        return Easing[type];
    }
    return Easing.easeInOutQuad;
}
//# sourceMappingURL=data:application/json;base64,
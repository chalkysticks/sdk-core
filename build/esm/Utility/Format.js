export function bytesToSize(bytes) {
    let sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    if (bytes == 0)
        return '0 Byte';
    let i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)).toString());
    return Math.round(bytes / Math.pow(1024, i)) + ' ' + sizes[i];
}
export function daysBetweenDates(date1, date2) {
    const timeDiff = Math.abs(date2.getTime() - date1.getTime());
    return Math.ceil(timeDiff / (1000 * 3600 * 24));
}
export function secondsToTime(seconds, format = '00:00:00') {
    let date = new Date(0);
    date.setSeconds(seconds);
    switch (format) {
        case '00:00:00':
            return date.toISOString().substr(11, 8);
        case '00:00':
            return date.toISOString().substr(14, 5);
        case '00':
            return date.toISOString().substr(17, 2);
    }
    return date.toISOString().substr(11, 8);
}
export function timeToSeconds(time) {
    let [hours, minutes, seconds] = time.split(':').map(Number);
    return hours * 3600 + minutes * 60 + seconds;
}
function parseTimeInput(input) {
    if (input instanceof Date) {
        return isNaN(input.getTime()) ? null : input;
    }
    if (typeof input === 'string') {
        const date = new Date(input);
        if (!isNaN(date.getTime())) {
            return date;
        }
        const timeParts = input.split(':').map(Number);
        if (timeParts.length === 3 && timeParts.every((n) => !isNaN(n))) {
            const now = new Date();
            return new Date(now.getFullYear(), now.getMonth(), now.getDate(), timeParts[0], timeParts[1], timeParts[2]);
        }
    }
    if (typeof input === 'number') {
        if (input < 946684800000) {
            return new Date(Date.now() + input * 1000);
        }
        return new Date(input);
    }
    return null;
}
export function timeToHuman(time, hideEmptyUnits = false) {
    let totalSeconds;
    if (typeof time === 'string') {
        const parts = time.split(':').map(Number);
        if (parts.length === 3 && parts.every((n) => !isNaN(n))) {
            totalSeconds = parts[0] * 3600 + parts[1] * 60 + parts[2];
        }
        else {
            const date = parseTimeInput(time);
            if (!date)
                return '';
            totalSeconds = Math.floor((date.getTime() - Date.now()) / 1000);
        }
    }
    else if (time instanceof Date) {
        totalSeconds = Math.floor((time.getTime() - Date.now()) / 1000);
    }
    else {
        if (time > 946684800000) {
            totalSeconds = Math.floor((time - Date.now()) / 1000);
        }
        else {
            totalSeconds = time;
        }
    }
    const hours = Math.floor(Math.abs(totalSeconds) / 3600);
    const minutes = Math.floor((Math.abs(totalSeconds) % 3600) / 60);
    const seconds = Math.floor(Math.abs(totalSeconds) % 60);
    if (hideEmptyUnits) {
        const parts = [];
        if (hours > 0)
            parts.push(`${hours}h`);
        if (minutes > 0)
            parts.push(`${minutes}m`);
        if (seconds > 0)
            parts.push(`${seconds}s`);
        return parts.join(' ') || '0s';
    }
    return `${hours}h ${minutes}m ${seconds}s`;
}
export function getRelativeTime(date, options = {}) {
    const parsedDate = parseTimeInput(date);
    if (!parsedDate) {
        return '';
    }
    const { type = 'ago', suffix = '', shortUnits = false } = options;
    const now = new Date();
    const isPast = parsedDate < now;
    const diff = Math.abs(type === 'ago' ? now.getTime() - parsedDate.getTime() : parsedDate.getTime() - now.getTime());
    const seconds = Math.floor(diff / 1000);
    const intervals = {
        year: 31536000,
        month: 2592000,
        day: 86400,
        hour: 3600,
        minute: 60,
        second: 1,
    };
    const units = {
        year: shortUnits ? 'y' : 'year',
        month: shortUnits ? 'mo' : 'month',
        day: shortUnits ? 'd' : 'day',
        hour: shortUnits ? 'h' : 'hour',
        minute: shortUnits ? 'm' : 'minute',
        second: shortUnits ? 's' : 'second',
    };
    for (const [unit, secondsInUnit] of Object.entries(intervals)) {
        const interval = seconds / secondsInUnit;
        if (interval >= 1) {
            const value = Math.floor(interval);
            const unitName = units[unit];
            const pluralUnit = !shortUnits && value !== 1 ? unitName + 's' : unitName;
            const timePart = `${value} ${pluralUnit}`;
            if (!suffix) {
                return timePart;
            }
            return `${timePart} ${suffix}`.trim();
        }
    }
    const zeroUnit = shortUnits ? '0s' : '0 seconds';
    return suffix ? `${zeroUnit} ${suffix}`.trim() : zeroUnit;
}
export function timeAgo(date, type = 'ago', suffix = 'ago') {
    return getRelativeTime(date, {
        suffix: 'ago',
        type: 'ago',
    });
}
export function timeUntil(date, type = 'until', suffix = 'left') {
    return getRelativeTime(date, {
        suffix: 'left',
        type: 'until',
    });
}
//# sourceMappingURL=data:application/json;base64,
export function bytesToSize(bytes) {
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    if (bytes === 0) {
        return '0 Byte';
    }
    const exponent = Math.floor(Math.log(bytes) / Math.log(1024));
    const value = Math.round(bytes / Math.pow(1024, exponent));
    return `${value} ${sizes[exponent]}`;
}
export function daysBetweenDates(date1, date2) {
    const timeDifference = Math.abs(date2.getTime() - date1.getTime());
    const daysDifference = Math.ceil(timeDifference / (1000 * 3600 * 24));
    return daysDifference;
}
export function secondsToTime(seconds, format = '00:00:00') {
    let date = new Date(0);
    date.setSeconds(seconds);
    switch (format) {
        case '00:00:00':
            return date.toISOString().substr(11, 8);
        case '00:00':
            return date.toISOString().substr(14, 5);
        case '00':
            return date.toISOString().substr(17, 2);
    }
    return date.toISOString().substr(11, 8);
}
export function timeToSeconds(time) {
    let [hours, minutes, seconds] = time.split(':').map(Number);
    return hours * 3600 + minutes * 60 + seconds;
}
export function normalizeDateString(input) {
    const isoString = input.includes(' ') && !input.includes('T') ? input.replace(' ', 'T') + (input.length === 19 ? 'Z' : '') : input;
    const date = new Date(isoString);
    return isNaN(date.getTime()) ? null : date;
}
function parseTimeInput(input) {
    if (input instanceof Date) {
        return isNaN(input.getTime()) ? null : input;
    }
    if (typeof input === 'string') {
        const date = new Date(input);
        if (!isNaN(date.getTime())) {
            return date;
        }
        const timeParts = input.split(':').map(Number);
        if (timeParts.length === 3 && timeParts.every((number) => !isNaN(number))) {
            const now = new Date();
            return new Date(now.getFullYear(), now.getMonth(), now.getDate(), timeParts[0], timeParts[1], timeParts[2]);
        }
    }
    if (typeof input === 'number') {
        if (input < 946684800000) {
            return new Date(Date.now() + input * 1000);
        }
        return new Date(input);
    }
    return null;
}
export function timeToHuman(time, hideEmptyUnits = false) {
    let totalSeconds;
    if (typeof time === 'string') {
        const parts = time.split(':').map(Number);
        if (parts.length === 3 && parts.every((n) => !isNaN(n))) {
            totalSeconds = parts[0] * 3600 + parts[1] * 60 + parts[2];
        }
        else {
            const date = parseTimeInput(time);
            if (!date)
                return '';
            totalSeconds = Math.floor((date.getTime() - Date.now()) / 1000);
        }
    }
    else if (time instanceof Date) {
        totalSeconds = Math.floor((time.getTime() - Date.now()) / 1000);
    }
    else {
        if (time > 946684800000) {
            totalSeconds = Math.floor((time - Date.now()) / 1000);
        }
        else {
            totalSeconds = time;
        }
    }
    const hours = Math.floor(Math.abs(totalSeconds) / 3600);
    const minutes = Math.floor((Math.abs(totalSeconds) % 3600) / 60);
    const seconds = Math.floor(Math.abs(totalSeconds) % 60);
    if (hideEmptyUnits) {
        const parts = [];
        if (hours > 0)
            parts.push(`${hours}h`);
        if (minutes > 0)
            parts.push(`${minutes}m`);
        if (seconds > 0)
            parts.push(`${seconds}s`);
        return parts.join(' ') || '0s';
    }
    return `${hours}h ${minutes}m ${seconds}s`;
}
export function getRelativeTime(date, options = {}) {
    const parsedDate = parseTimeInput(date);
    if (!parsedDate) {
        return '';
    }
    const { type = 'ago', suffix = '', shortUnits = false } = options;
    const now = new Date();
    const isPast = parsedDate < now;
    const difference = Math.abs(type === 'ago' ? now.getTime() - parsedDate.getTime() : parsedDate.getTime() - now.getTime());
    const seconds = Math.floor(difference / 1000);
    const intervals = {
        day: 86400,
        hour: 3600,
        minute: 60,
        month: 2592000,
        second: 1,
        year: 31536000,
    };
    const units = {
        day: shortUnits ? 'd' : 'day',
        hour: shortUnits ? 'h' : 'hour',
        minute: shortUnits ? 'm' : 'minute',
        month: shortUnits ? 'mo' : 'month',
        second: shortUnits ? 's' : 'second',
        year: shortUnits ? 'y' : 'year',
    };
    for (const [unit, secondsInUnit] of Object.entries(intervals)) {
        const interval = seconds / secondsInUnit;
        if (interval >= 1) {
            const value = Math.floor(interval);
            const unitName = units[unit];
            const pluralUnit = !shortUnits && value !== 1 ? unitName + 's' : unitName;
            const timePart = `${value} ${pluralUnit}`;
            if (!suffix) {
                return timePart;
            }
            return `${timePart} ${suffix}`.trim();
        }
    }
    const zeroUnit = shortUnits ? '0s' : '0 seconds';
    return suffix ? `${zeroUnit} ${suffix}`.trim() : zeroUnit;
}
export function timeAgo(date, type = 'ago', suffix = 'ago') {
    return getRelativeTime(date, {
        suffix: 'ago',
        type: 'ago',
    });
}
export function timeUntil(date, type = 'until', suffix = 'left') {
    return getRelativeTime(date, {
        suffix: 'left',
        type: 'until',
    });
}
export function toDate(input) {
    return parseTimeInput(input);
}
export function toISOString(input) {
    const date = toDate(input);
    return date ? date.toISOString() : '';
}
export function formatTime(dateInput, format = 'YYYY-MM-DD HH:mm:ss') {
    let date;
    if (typeof dateInput === 'string') {
        const normalizedDate = normalizeDateString(dateInput);
        if (!normalizedDate) {
            return '';
        }
        date = normalizedDate;
    }
    else if (dateInput instanceof Date) {
        date = dateInput;
    }
    else {
        return '';
    }
    if (isNaN(date.getTime())) {
        return '';
    }
    if (!(date instanceof Date) || isNaN(date.getTime())) {
        return '';
    }
    const padWithZero = (number) => {
        return number.toString().padStart(2, '0');
    };
    const getMonthAbbreviation = (monthIndex) => {
        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        return monthNames[monthIndex];
    };
    const getMonthName = (monthIndex) => {
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        return monthNames[monthIndex];
    };
    const getDayAbbreviation = (dayIndex) => {
        const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        return dayNames[dayIndex];
    };
    const getDayName = (dayIndex) => {
        const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        return dayNames[dayIndex];
    };
    const getTwelveHourFormat = (hours) => {
        return hours % 12 || 12;
    };
    const getMeridiemIndicator = (hours) => {
        return hours < 12 ? 'AM' : 'PM';
    };
    const tokenReplacements = {
        A: getMeridiemIndicator(date.getHours()),
        D: date.getDate().toString(),
        DD: padWithZero(date.getDate()),
        H: date.getHours().toString(),
        HH: padWithZero(date.getHours()),
        M: (date.getMonth() + 1).toString(),
        MM: padWithZero(date.getMonth() + 1),
        MMM: getMonthAbbreviation(date.getMonth()),
        MMMM: getMonthName(date.getMonth()),
        YY: date.getFullYear().toString().slice(-2),
        YYYY: date.getFullYear().toString(),
        a: getMeridiemIndicator(date.getHours()).toLowerCase(),
        ddd: getDayAbbreviation(date.getDay()),
        dddd: getDayName(date.getDay()),
        h: getTwelveHourFormat(date.getHours()).toString(),
        hh: padWithZero(getTwelveHourFormat(date.getHours())),
        m: date.getMinutes().toString(),
        mm: padWithZero(date.getMinutes()),
        s: date.getSeconds().toString(),
        ss: padWithZero(date.getSeconds()),
    };
    const tokenPattern = Object.keys(tokenReplacements)
        .sort((a, b) => b.length - a.length)
        .join('|');
    const regex = new RegExp(tokenPattern, 'g');
    return format.replace(regex, (match) => tokenReplacements[match]);
}
//# sourceMappingURL=data:application/json;base64,
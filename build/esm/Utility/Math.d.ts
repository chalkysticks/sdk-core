export interface IVector {
    x: number;
    y: number;
}
export declare const FOOT_METER_RATIO = 3.28084;
export declare const MPH_METER_RATIO = 0.44704;
export declare function angle(x1: number, y1: number, x2: number, y2: number): number;
export declare function angleAsDegrees(x1: number, y1: number, x2: number, y2: number): number;
export declare function angleDifference(a: number, b: number): number;
export declare function angleDifferenceAsDegrees(a: number, b: number): number;
export declare function angleFromVector(vector: IVector): number;
export declare function angleFromVectors(vectorA: IVector, vectorB: IVector): number;
export declare function angleNormalize(angle: number): number;
export declare function clamp(value: number, min: number, max: number): number;
export declare function clampUnsigned(value: number, min: number, max: number): number;
export declare function denormalize(value: number, min: number, max: number, useClamp?: boolean): number;
export declare function distance(x1: number, y1: number, x2: number, y2: number): number;
export declare function dot(x1: number, y1: number, x2: number, y2: number): number;
export declare function feetToMeters(feet: number): number;
export declare function inverseLerp(a: number, b: number, value: number): number;
export declare function lerp(a: number, b: number, t: number): number;
export declare function logarithmicZoom(startValue: number, delta: number, increment?: number): number;
export declare function metersToFeet(meters: number): number;
export declare function minMax(value: number, min: number, max: number): number;
export declare function minMaxUnsigned(value: number, min: number, max: number): number;
export declare function mphToMs(mph: number): number;
export declare function msToMph(ms: number): number;
export declare function normalize(value: number, min: number, max: number, useClamp?: boolean): number;
export declare function remap(value: number, a: number, b: number, c: number, d: number): number;
export declare function randomRange(min: number, max: number): number;
export declare function randomInt(min: number, max: number): number;
export declare function randomSign(): number;
export declare function rotate(x: number, y: number, angle: number): [number, number];
export declare function rotateDeg(x: number, y: number, angle: number): [number, number];
export declare function round(value: number, decimals?: number): number;
export declare function roundToNearest(value: number, nearest: number): number;
export declare function roundToNearestFraction(value: number, fraction: number): number;
export declare function roundToDecimal(value: number, decimals: number): number;
export declare function smoothstep(min: number, max: number, value: number): number;
export declare function smootherstep(min: number, max: number, value: number): number;
export declare function toRadians(degrees: number): number;
export declare function toDegrees(radians: number): number;
export declare function transformRatio(ratio: number, by?: number, easeInFunction?: string, easeOutFunction?: string): number;

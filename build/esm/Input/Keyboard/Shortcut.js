import { Event } from '../../index.js';
export class Shortcut extends Event.Dispatcher {
    static add(key, callback) {
        Shortcut.instance.add(key, callback);
    }
    static { this.instance = new Shortcut({
        ignoreInputs: true,
    }); }
    constructor(options = {}) {
        super();
        this.keymap = {};
        this.attached = false;
        this.keysDown = {};
        this.options = {
            ignoreInputs: true,
        };
        Object.assign(this.options, options || {});
    }
    add(key, callback) {
        this.ensureSetup();
        this.keymap[key] = callback;
    }
    remove(key) {
        delete this.keymap[key];
    }
    ensureSetup() {
        if (this.attached) {
            return;
        }
        this.attached = true;
        document.addEventListener('keydown', this.Handle_OnKeyDown.bind(this));
        document.addEventListener('keyup', this.Handle_OnKeyUp.bind(this));
    }
    findMatch() {
        let keys = Object.keys(this.keymap);
        keys = keys.sort((a, b) => {
            return (b.match(/\+/g)?.length || 0) - (a.match(/\+/g)?.length || 0);
        });
        return keys.find((key) => {
            const parsed = key.replace(/\s+/g, '').toLowerCase().split('+');
            return parsed.every((key) => {
                return this.keysDown[key.toLowerCase()];
            });
        });
    }
    normalize(key) {
        return key
            .toLowerCase()
            .trim()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            .replace('arrow', '');
    }
    Handle_OnKeyDown(e) {
        const currentTarget = e.target;
        if (!(e instanceof KeyboardEvent)) {
            return;
        }
        if (this.options.ignoreInputs) {
            if (currentTarget.tagName === 'INPUT' || currentTarget.tagName === 'TEXTAREA') {
                return;
            }
        }
        const key = this.normalize(e.key);
        this.keysDown[key] = true;
        const match = this.findMatch() || '';
        const callback = this.keymap[match];
        if (!callback) {
            return;
        }
        this.trigger('shortcut:found', { match });
        callback();
    }
    Handle_OnKeyUp(e) {
        if (!(e instanceof KeyboardEvent)) {
            return;
        }
        const key = this.normalize(e.key);
        delete this.keysDown[key];
    }
}
export class ShortcutSequencer extends Event.Dispatcher {
    static add(keys, callback) {
        ShortcutSequencer.instance.add(keys, callback);
    }
    static remove(keys) {
        ShortcutSequencer.instance.remove(keys);
    }
    static { this.instance = new ShortcutSequencer(); }
    constructor() {
        super();
        this.matches = [];
        this.sequences = {};
        this.shortcut = new Shortcut();
        this.shortcut.on('shortcut:found', this.Handle_OnShortcutFound.bind(this));
    }
    add(keys, callback) {
        const key = keys.join(',');
        keys.forEach((key) => {
            this.shortcut.add(key, () => { });
        });
        this.sequences[key] = callback;
    }
    remove(keys) {
        const key = keys.join(',');
        keys.forEach((key) => {
            this.shortcut.remove(key);
        });
        delete this.sequences[key];
    }
    async Handle_OnShortcutFound(e) {
        const match = e.data.match;
        this.matches.push(match);
        this.matches = this.matches.slice(-20);
        const sequence = Object.keys(this.sequences).find((sequence) => {
            const keys = sequence.split(',');
            const matches = this.matches.slice(-keys.length);
            return (matches.length >= keys.length &&
                matches.every((match, index) => {
                    return match === keys[index];
                }));
        });
        if (!sequence) {
            return;
        }
        const callback = this.sequences[sequence];
        if (!callback) {
            return;
        }
        callback();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2hvcnRjdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvSW5wdXQvS2V5Ym9hcmQvU2hvcnRjdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBc0N2QyxNQUFNLE9BQU8sUUFBUyxTQUFRLEtBQUssQ0FBQyxVQUFVO0lBTXRDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBVyxFQUFFLFFBQTJCO1FBQ3pELFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN0QyxDQUFDO2FBT2EsYUFBUSxHQUFhLElBQUksUUFBUSxDQUFDO1FBQy9DLFlBQVksRUFBRSxJQUFJO0tBQ2xCLENBQUMsQUFGb0IsQ0FFbkI7SUE0QkgsWUFBWSxVQUE0QixFQUFFO1FBQ3pDLEtBQUssRUFBRSxDQUFDO1FBeEJDLFdBQU0sR0FBc0MsRUFBRSxDQUFDO1FBS2pELGFBQVEsR0FBWSxLQUFLLENBQUM7UUFLMUIsYUFBUSxHQUE0QixFQUFFLENBQUM7UUFLdkMsWUFBTyxHQUFxQjtZQUNuQyxZQUFZLEVBQUUsSUFBSTtTQUNsQixDQUFDO1FBVUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBT00sR0FBRyxDQUFDLEdBQVcsRUFBRSxRQUEyQjtRQUVsRCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFHbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUM7SUFDN0IsQ0FBQztJQU1NLE1BQU0sQ0FBQyxHQUFXO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBS1MsV0FBVztRQUVwQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNuQixPQUFPO1FBQ1IsQ0FBQztRQUdELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBR3JCLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBS1MsU0FBUztRQUNsQixJQUFJLElBQUksR0FBYSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUc5QyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsRUFBRTtZQUN6QyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxNQUFNLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN0RSxDQUFDLENBQUMsQ0FBQztRQUdILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQVcsRUFBRSxFQUFFO1lBQ2hDLE1BQU0sTUFBTSxHQUFhLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUcxRSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFXLEVBQUUsRUFBRTtnQkFDbkMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1lBQ3pDLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBTVMsU0FBUyxDQUFDLEdBQVc7UUFDOUIsT0FBTyxHQUFHO2FBQ1IsV0FBVyxFQUFFO2FBQ2IsSUFBSSxFQUFFO2FBQ04sU0FBUyxDQUFDLEtBQUssQ0FBQzthQUNoQixPQUFPLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxDQUFDO2FBQy9CLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQVNTLGdCQUFnQixDQUFDLENBQWdCO1FBQzFDLE1BQU0sYUFBYSxHQUFnQixDQUFDLENBQUMsTUFBcUIsQ0FBQztRQUczRCxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksYUFBYSxDQUFDLEVBQUUsQ0FBQztZQUNuQyxPQUFPO1FBQ1IsQ0FBQztRQUdELElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUUvQixJQUFJLGFBQWEsQ0FBQyxPQUFPLEtBQUssT0FBTyxJQUFJLGFBQWEsQ0FBQyxPQUFPLEtBQUssVUFBVSxFQUFFLENBQUM7Z0JBQy9FLE9BQU87WUFDUixDQUFDO1FBQ0YsQ0FBQztRQUdELE1BQU0sR0FBRyxHQUFXLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRzFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRzFCLE1BQU0sS0FBSyxHQUFXLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFHN0MsTUFBTSxRQUFRLEdBQWtDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFHbkUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2YsT0FBTztRQUNSLENBQUM7UUFPRCxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUcxQyxRQUFRLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFNUyxjQUFjLENBQUMsQ0FBZ0I7UUFFeEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLGFBQWEsQ0FBQyxFQUFFLENBQUM7WUFDbkMsT0FBTztRQUNSLENBQUM7UUFHRCxNQUFNLEdBQUcsR0FBVyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUcxQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7QUFtQkYsTUFBTSxPQUFPLGlCQUFrQixTQUFRLEtBQUssQ0FBQyxVQUFVO0lBTS9DLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBYyxFQUFFLFFBQTJCO1FBQzVELGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFNTSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQWM7UUFDbEMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDO2FBT2EsYUFBUSxHQUFzQixJQUFJLGlCQUFpQixFQUFFLEFBQTdDLENBQThDO0lBb0JwRTtRQUNDLEtBQUssRUFBRSxDQUFDO1FBaEJDLFlBQU8sR0FBYSxFQUFFLENBQUM7UUFLdkIsY0FBUyxHQUFzQyxFQUFFLENBQUM7UUFLbEQsYUFBUSxHQUFhLElBQUksUUFBUSxFQUFFLENBQUM7UUFTN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFPTSxHQUFHLENBQUMsSUFBYyxFQUFFLFFBQTJCO1FBQ3JELE1BQU0sR0FBRyxHQUFXLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFHbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQVcsRUFBRSxFQUFFO1lBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUdILElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQ2hDLENBQUM7SUFNTSxNQUFNLENBQUMsSUFBYztRQUMzQixNQUFNLEdBQUcsR0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBR25DLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFXLEVBQUUsRUFBRTtZQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztRQUdILE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBU1MsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQU07UUFDNUMsTUFBTSxLQUFLLEdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFHbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFHekIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBR3ZDLE1BQU0sUUFBUSxHQUF1QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFnQixFQUFFLEVBQUU7WUFDMUYsTUFBTSxJQUFJLEdBQWEsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQyxNQUFNLE9BQU8sR0FBYSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUczRCxPQUFPLENBQ04sT0FBTyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTTtnQkFDN0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQWEsRUFBRSxLQUFhLEVBQUUsRUFBRTtvQkFDOUMsT0FBTyxLQUFLLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM5QixDQUFDLENBQUMsQ0FDRixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFHSCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDZixPQUFPO1FBQ1IsQ0FBQztRQUdELE1BQU0sUUFBUSxHQUFrQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBR3pFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNmLE9BQU87UUFDUixDQUFDO1FBR0QsUUFBUSxFQUFFLENBQUM7SUFDWixDQUFDIn0=
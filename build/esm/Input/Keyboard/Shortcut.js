import { Event } from '../../index.js';
export class Shortcut extends Event.Dispatcher {
    static add(key, callback) {
        shortcutSingleton.add(key, callback);
    }
    constructor(options = {}) {
        super();
        this.keymap = {};
        this.attached = false;
        this.keysDown = {};
        this.options = {
            ignoreInputs: true,
        };
        Object.assign(this.options, options || {});
    }
    add(key, callback) {
        this.ensureSetup();
        this.keymap[key] = callback;
    }
    remove(key) {
        delete this.keymap[key];
    }
    ensureSetup() {
        if (this.attached) {
            return;
        }
        this.attached = true;
        document.addEventListener('keydown', this.Handle_OnKeyDown.bind(this));
        document.addEventListener('keyup', this.Handle_OnKeyUp.bind(this));
    }
    findMatch() {
        let keys = Object.keys(this.keymap);
        keys = keys.sort((a, b) => {
            return (b.match(/\+/g)?.length || 0) - (a.match(/\+/g)?.length || 0);
        });
        return keys.find((key) => {
            const parsed = key.replace(/\s+/g, '').toLowerCase().split('+');
            return parsed.every((key) => {
                return this.keysDown[key.toLowerCase()];
            });
        });
    }
    normalize(key) {
        return key
            .toLowerCase()
            .trim()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            .replace('arrow', '');
    }
    Handle_OnKeyDown(e) {
        const currentTarget = e.target;
        if (!(e instanceof KeyboardEvent)) {
            return;
        }
        if (this.options.ignoreInputs) {
            if (currentTarget.tagName === 'INPUT' || currentTarget.tagName === 'TEXTAREA') {
                return;
            }
        }
        const key = this.normalize(e.key);
        this.keysDown[key] = true;
        const match = this.findMatch() || '';
        const callback = this.keymap[match];
        if (!callback) {
            return;
        }
        this.trigger('shortcut:found', { match });
        callback();
    }
    Handle_OnKeyUp(e) {
        if (!(e instanceof KeyboardEvent)) {
            return;
        }
        const key = this.normalize(e.key);
        delete this.keysDown[key];
    }
}
export class ShortcutSequencer extends Event.Dispatcher {
    static add(keys, callback) {
        shortcutSequencerSingleton.add(keys, callback);
    }
    static remove(keys) {
        shortcutSequencerSingleton.remove(keys);
    }
    static get instance() {
        return new ShortcutSequencer();
    }
    constructor() {
        super();
        this.matches = [];
        this.sequences = {};
        this.shortcut = new Shortcut();
        this.shortcut.on('shortcut:found', this.Handle_OnShortcutFound.bind(this));
    }
    add(keys, callback) {
        const key = keys.join(',');
        keys.forEach((key) => {
            this.shortcut.add(key, () => { });
        });
        this.sequences[key] = callback;
    }
    remove(keys) {
        const key = keys.join(',');
        keys.forEach((key) => {
            this.shortcut.remove(key);
        });
        delete this.sequences[key];
    }
    async Handle_OnShortcutFound(e) {
        const match = e.data.match;
        this.matches.push(match);
        this.matches = this.matches.slice(-20);
        const sequence = Object.keys(this.sequences).find((sequence) => {
            const keys = sequence.split(',');
            const matches = this.matches.slice(-keys.length);
            return (matches.length >= keys.length &&
                matches.every((match, index) => {
                    return match === keys[index];
                }));
        });
        if (!sequence) {
            return;
        }
        const callback = this.sequences[sequence];
        if (!callback) {
            return;
        }
        callback();
    }
}
const shortcutSingleton = new Shortcut({
    ignoreInputs: true,
});
const shortcutSequencerSingleton = new ShortcutSequencer();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2hvcnRjdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvSW5wdXQvS2V5Ym9hcmQvU2hvcnRjdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBc0N2QyxNQUFNLE9BQU8sUUFBUyxTQUFRLEtBQUssQ0FBQyxVQUFVO0lBTXRDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBVyxFQUFFLFFBQTJCO1FBQ3pELGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQTRCRCxZQUFZLFVBQTRCLEVBQUU7UUFDekMsS0FBSyxFQUFFLENBQUM7UUF4QkMsV0FBTSxHQUFzQyxFQUFFLENBQUM7UUFLakQsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUsxQixhQUFRLEdBQTRCLEVBQUUsQ0FBQztRQUt2QyxZQUFPLEdBQXFCO1lBQ25DLFlBQVksRUFBRSxJQUFJO1NBQ2xCLENBQUM7UUFVRCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFPTSxHQUFHLENBQUMsR0FBVyxFQUFFLFFBQTJCO1FBRWxELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUduQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0lBTU0sTUFBTSxDQUFDLEdBQVc7UUFDeEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFLUyxXQUFXO1FBRXBCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ25CLE9BQU87UUFDUixDQUFDO1FBR0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFHckIsUUFBUSxDQUFDLGdCQUFnQixD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
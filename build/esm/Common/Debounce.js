/**
 * Debounce (Inclusive)
 *
 * Prevents a function from being fired too often by determining
 * a difference in time from the last time in which it was fired.
 *
 * Applies inclusive techniques to execute functions one last time.
 *
 * @author Matt Kenefick <polymermallard.com>
 * @see https://medium.com/@mattkenefick/debouncing-in-typescript-d5edddf39cdc
 */
export default class Debounce {
    /**
     * Statically call a debounced method and infer its categorization
     *
     * @return void
     */
    static exec(reference, callable, args = [], timeout = 1000) {
        if (!this.instances[reference]) {
            const instance = new Debounce(callable, timeout);
            this.instances[reference] = instance.run;
        }
        this.instances[reference](...args);
    }
    /**
     * Static references to debouncers generated by the `exec` call
     *
     * @type [symbol, any]
     */
    static instances = {};
    /**
     * Debounced function
     *
     * @type function
     */
    callback;
    /**
     * Time in between triggers
     *
     * @type number
     */
    threshold;
    /**
     * Last time this function was triggered
     *
     * @type number
     */
    lastTrigger = 0;
    /**
     * Timeout for calling future events
     *
     * @type number
     */
    timeout = 0;
    /**
     * @param function callback
     * @param number threshold
     * @return function
     */
    constructor(callback, threshold = 200) {
        this.callback = callback;
        this.threshold = threshold;
        // Don't execute on first pass; only after threshold waits
        // Disable this if you want immediate execution as well as inclusive
        this.lastTrigger = Date.now();
        this.run = this.run.bind(this);
    }
    /**
     * Executable function
     *
     * @return void
     */
    run() {
        const now = Date.now();
        const diff = now - this.lastTrigger;
        // Execute Immediately
        if (diff > this.threshold) {
            this.lastTrigger = now;
            this.callback();
        }
        // Cancel future event, if exists
        if (this.timeout !== 0) {
            clearTimeout(this.timeout);
            this.timeout = 0;
        }
        // Create future event
        this.timeout = window.setTimeout(this.callback, this.threshold);
    }
}

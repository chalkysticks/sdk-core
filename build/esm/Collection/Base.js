import * as Event from '../Event/index.js';
import * as Provider from '../Provider/index.js';
import * as Format from '../Utility/Format.js';
import Constants from '../Common/Constants.js';
import Environment from '../Common/Environment.js';
import { Collection } from 'restmc';
export class Base extends Collection {
    static useReactiveHook(hook) {
        this._reactiveHook = hook;
    }
    constructor(options = {}, autoSetup = true) {
        super(options);
        this.baseUrl = Environment.app.apiUrl;
        this.limit = Environment.app.limit;
        this.uniqueKey = '';
        this.Handle_OnLoginSuccess = this.Handle_OnLoginSuccess.bind(this);
        autoSetup && this.setup(options);
    }
    setup(options = {}) {
        const ctor = this.constructor;
        ctor._reactiveHook?.(this);
        this.baseUrl = options.baseUrl || this.baseUrl || Environment.app.apiUrl || Constants.API_URL;
        this.setOptions({
            withCredentials: false,
        });
        this.limit = options.limit || this.limit;
        this.page = options.page || this.page;
        this.builder.qp('limit', this.limit);
        this.builder.qp('page', this.page);
        this.ensureToken(options.token);
        this.setHeaders(Environment.headers);
        this.attachEvents();
    }
    ensureToken(token = '') {
        const store = Provider.Store.get();
        token = token || store?.state?.token || store?.getters['authentication/token'];
        token && this.setToken(token);
    }
    attachEvents() {
        Event.Bus.on('login', this.Handle_OnLoginSuccess);
        this.on('add:before', (e) => {
            e.detail.model.baseUrl = this.baseUrl;
        });
        this.on('requesting', (e) => {
            const data = { collection: this };
            this.dispatch('request:loading', data);
            Event.Bus.dispatch('request:loading', data);
        });
        this.on('finish', (e) => {
            const data = { collection: this };
            this.dispatch('request:loaded', data);
            Event.Bus.dispatch('request:loaded', data);
        });
        this.on('error', (e) => {
            const status = e.detail.request?.status || e.detail.request?.response?.status;
            const data = { collection: this };
            if (status === 401) {
                this.dispatch('request:unauthorized', data);
                Event.Bus.dispatch('request:unauthorized', data);
            }
            else if (status === 403) {
                this.dispatch('request:forbidden', data);
                Event.Bus.dispatch('request:forbidden', data);
            }
            else if (status === 405) {
                this.dispatch('request:not_allowed', data);
                Event.Bus.dispatch('request:not_allowed', data);
            }
            else if (status === 406) {
                this.dispatch('request:not_acceptable', data);
                Event.Bus.dispatch('request:not_acceptable', data);
            }
            else if (status === 409) {
                this.dispatch('request:conflict', data);
                Event.Bus.dispatch('request:conflict', data);
            }
            else if (status === 503) {
                this.dispatch('request:service_unavailable', data);
                Event.Bus.dispatch('request:service_unavailable', data);
            }
            this.dispatch('request:error', data);
            Event.Bus.dispatch('request:error', data);
        });
    }
    detachEvents() {
        Event.Bus.off('login', this.Handle_OnLoginSuccess);
        this.off('add');
        this.off('error');
        this.off('finish');
        this.off('requesting');
    }
    shouldFetch() {
        if (this.loading) {
            return false;
        }
        return this.models.length === 0 || this.requestTime <= 0;
    }
    getBaseUrl() {
        return Environment.app.localUrl || this.baseUrl;
    }
    isV1() {
        return this.baseUrl.toLowerCase().indexOf('/v1') > 0;
    }
    isV2() {
        return this.baseUrl.toLowerCase().indexOf('/v2') > 0;
    }
    isV3() {
        return this.baseUrl.toLowerCase().indexOf('/v3') > 0;
    }
    getCreatedAt(id, format = 'YYYY-MM-DD HH:mm:ss') {
        const model = this.get(id);
        if (!model) {
            return '';
        }
        const createdAt = model.attr('created_at');
        if (!createdAt) {
            return '';
        }
        return Format.formatTime(createdAt, format);
    }
    getCreatedAtDate(id) {
        const model = this.get(id);
        if (!model) {
            return null;
        }
        const createdAt = model.attr('created_at');
        return createdAt ? Format.toDate(createdAt) : null;
    }
    getCreatedAtTimeAgo(id, shortUnits = false) {
        const model = this.get(id);
        if (!model) {
            return '';
        }
        const createdAt = model.attr('created_at');
        if (!createdAt) {
            return '';
        }
        return Format.getRelativeTime(createdAt, {
            type: 'ago',
            suffix: 'ago',
            shortUnits: shortUnits,
        });
    }
    getUpdatedAt(id, format = 'YYYY-MM-DD HH:mm:ss') {
        const model = this.get(id);
        if (!model) {
            return '';
        }
        const updatedAt = model.attr('updated_at');
        if (!updatedAt) {
            return '';
        }
        return Format.formatTime(updatedAt, format);
    }
    getUpdatedAtDate(id) {
        const model = this.get(id);
        if (!model) {
            return null;
        }
        const updatedAt = model.attr('updated_at');
        return updatedAt ? Format.toDate(updatedAt) : null;
    }
    getUpdatedAtTimeAgo(id, shortUnits = false) {
        const model = this.get(id);
        if (!model) {
            return '';
        }
        const updatedAt = model.attr('updated_at');
        if (!updatedAt) {
            return '';
        }
        return Format.getRelativeTime(updatedAt, {
            type: 'ago',
            suffix: 'ago',
            shortUnits: shortUnits,
        });
    }
    getDeletedAt(id, format = 'YYYY-MM-DD HH:mm:ss') {
        const model = this.get(id);
        if (!model) {
            return '';
        }
        const deletedAt = model.attr('deleted_at');
        if (!deletedAt) {
            return '';
        }
        return Format.formatTime(deletedAt, format);
    }
    getDeletedAtDate(id) {
        const model = this.get(id);
        if (!model) {
            return null;
        }
        const deletedAt = model.attr('deleted_at');
        return deletedAt ? Format.toDate(deletedAt) : null;
    }
    getDeletedAtTimeAgo(id, shortUnits = false) {
        const model = this.get(id);
        if (!model) {
            return '';
        }
        const deletedAt = model.attr('deleted_at');
        if (!deletedAt) {
            return '';
        }
        return Format.getRelativeTime(deletedAt, {
            type: 'ago',
            suffix: 'ago',
            shortUnits: shortUnits,
        });
    }
    isDeleted(id) {
        const model = this.get(id);
        if (!model) {
            return false;
        }
        return !!model.attr('deleted_at');
    }
    async Handle_OnLoginSuccess(e) {
        const token = e.data.token;
        this.ensureToken(token);
    }
}
//# sourceMappingURL=data:application/json;base64,